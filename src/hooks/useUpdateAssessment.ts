import axios from "axios";
import { useMutation, useQueryClient } from "@tanstack/react-query";
import type {
  SellNowServiceInfo,
  PawnServiceInfo,
  ConsignmentServiceInfo,
  RefinanceServiceInfo,
  IPhoneExchangeServiceInfo,
  TradeInServiceInfo,
} from "@/types/service";

export type AssessmentUpdateBody = {
  status: "reserved";
  sellNowServiceInfo?: SellNowServiceInfo;
  pawnServiceInfo?: PawnServiceInfo;
  consignmentServiceInfo?: ConsignmentServiceInfo;
  refinanceServiceInfo?: RefinanceServiceInfo;
  iphoneExchangeServiceInfo?: IPhoneExchangeServiceInfo;
  tradeInServiceInfo?: TradeInServiceInfo;
  appointmentAt?: string; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO 8601
  branchId?: string; // ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤ ("‡πÄ‡∏ã‡πá‡∏ô‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏ß‡∏±‡∏ô" ‡∏´‡∏£‡∏∑‡∏≠ "‡∏Å‡∏∏‡∏î‡∏õ‡∏•‡∏≤‡∏î‡∏∏‡∏Å")
  serviceType?: string; // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
  note?: string; // ‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
  locationType?: string; // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (store, home, bts)
};

// Interface ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà)
export type QueueBookingPayload = {
  customer: {
    fullname: string; // ‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•‡∏à‡∏£‡∏¥‡∏á
    phone: string; // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå
    line_user_id: string; // LINE User ID ‡∏à‡∏≤‡∏Å LIFF ‡∏´‡∏£‡∏∑‡∏≠‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡πÅ‡∏ó‡∏ô‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ
    email: string; // ‡∏≠‡∏µ‡πÄ‡∏°‡∏•
    picture_url: string; // URL ‡∏£‡∏π‡∏õ‡πÇ‡∏õ‡∏£‡πÑ‡∏ü‡∏•‡πå
  };
  appointment: {
    date: string; // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏•‡∏∞‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢‡πÉ‡∏ô‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö ISO 8601
    type: "ONSITE" | "ONLINE" | "OFFSITE"; // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏Å‡∏≤‡∏£‡∏ô‡∏±‡∏î‡∏´‡∏°‡∏≤‡∏¢
    serviceType: string; // ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£ (‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢)
    branchId: string; // ‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤
    requiredTags: string[]; // "REFINANCE" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö iphoneExchange ‡πÅ‡∏•‡∏∞ refinance, "GENERAL" ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÜ
  };
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ requiredTags ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£
const getRequiredTags = (payload: AssessmentUpdateBody): string[] => {
  if (payload.iphoneExchangeServiceInfo || payload.refinanceServiceInfo) {
    return ["REFINANCE"];
  }
  return ["GENERAL"];
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß
const bookQueue = async (queuePayload: QueueBookingPayload): Promise<any> => {
  console.log("üìã [QUEUE BOOKING] Starting queue booking process...");
  console.log("üìã [QUEUE BOOKING] Payload:", JSON.stringify(queuePayload, null, 2));

  try {
    const response = await axios.post(
      "https://queue-backend-zeta.vercel.app/api/v1/appointments/new-customer",
      queuePayload,
      {
        headers: { "Content-Type": "application/json" },
      },
    );
    console.log("‚úÖ [QUEUE BOOKING] Success! Response:", response.data);
    console.log("‚úÖ [QUEUE BOOKING] Status Code:", response.status);
    return response.data;
  } catch (error) {
    console.error("‚ùå [QUEUE BOOKING] Failed!");
    if (axios.isAxiosError(error)) {
      console.error("‚ùå [QUEUE BOOKING] Status:", error.response?.status);
      console.error("‚ùå [QUEUE BOOKING] Error Data:", error.response?.data);
      console.error("‚ùå [QUEUE BOOKING] Error Message:", error.message);
    } else {
      console.error("‚ùå [QUEUE BOOKING] Unknown Error:", error);
    }
    throw error;
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ appointmentType ‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà
const getAppointmentType = (locationType: string | undefined): "ONSITE" | "ONLINE" | "OFFSITE" => {
  if (locationType === "store") {
    return "ONSITE"; // ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô
  }
  if (locationType === "online") {
    return "ONLINE"; // ‡∏≠‡∏≠‡∏ô‡πÑ‡∏•‡∏ô‡πå
  }
  return "OFFSITE"; // ‡∏ô‡∏≠‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà (home ‡∏´‡∏£‡∏∑‡∏≠ bts)
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö map service type ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
const getServiceTypeInThai = (payload: AssessmentUpdateBody): string => {
  if (payload.sellNowServiceInfo) return "‡∏ã‡∏∑‡πâ‡∏≠‡∏Ç‡∏≤‡∏¢‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠";
  if (payload.pawnServiceInfo) return "‡∏Ç‡∏≤‡∏¢‡∏ù‡∏≤‡∏Å‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠";
  if (payload.refinanceServiceInfo) return "‡∏£‡∏µ‡πÑ‡∏ü‡πÅ‡∏ô‡∏ô‡∏ã‡πå";
  if (payload.iphoneExchangeServiceInfo) return "‡πÑ‡∏≠‡πÇ‡∏ü‡∏ô‡πÅ‡∏•‡∏Å‡πÄ‡∏á‡∏¥‡∏ô";
  if (payload.consignmentServiceInfo) return "‡∏Ç‡∏≤‡∏¢‡∏ù‡∏≤‡∏Å‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠";
  if (payload.tradeInServiceInfo) return "‡∏≠‡∏∑‡πà‡∏ô‡πÜ";
  return "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"; // default
};

export function useUpdateAssessment(assessmentId: string | undefined, lineUserId?: string | null) {
  const queryClient = useQueryClient();

  return useMutation<{ success: boolean }, Error, AssessmentUpdateBody | FormData>({
    mutationFn: async (payload) => {
      console.log("üöÄ [MUTATION] Starting mutation...");
      console.log("üöÄ [MUTATION] Assessment ID:", assessmentId);

      if (!assessmentId) throw new Error("Missing assessmentId");
      const isForm = typeof FormData !== "undefined" && payload instanceof FormData;

      console.log("üîç [MUTATION] Is FormData?", isForm);

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô FormData ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ API ‡πÄ‡∏î‡∏¥‡∏°
      if (isForm) {
        console.log("üì§ [MUTATION] Using FormData endpoint (skipping queue booking)");
        const url = `${process.env.NEXT_PUBLIC_BACKEND_URL}/api/assessments/${assessmentId}/service`;
        const res = await axios.put(url, payload);
        console.log("‚úÖ [MUTATION] FormData PUT response:", res.data);
        return res.data;
      }

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô JSON ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß
      const assessmentPayload = payload as AssessmentUpdateBody;
      const url = `${process.env.NEXT_PUBLIC_BACKEND_URL}/api/assessments/${assessmentId}`;

      console.log("üîç [MUTATION] Assessment Payload:", JSON.stringify(assessmentPayload, null, 2));

      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å service object ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà
      const activeService =
        assessmentPayload.sellNowServiceInfo ||
        assessmentPayload.pawnServiceInfo ||
        assessmentPayload.consignmentServiceInfo ||
        assessmentPayload.refinanceServiceInfo ||
        assessmentPayload.iphoneExchangeServiceInfo ||
        assessmentPayload.tradeInServiceInfo;

      console.log("üîç [MUTATION] Active Service:", activeService);
      console.log("üîç [MUTATION] Checking queue booking requirements...");
      console.log("   - appointmentAt:", activeService?.appointmentAt);
      console.log("   - branchId:", activeService?.branchId);
      console.log("   - serviceType:", activeService?.serviceType);
      console.log(
        "   - locationType:",
        "locationType" in (activeService || {}) ? (activeService as any).locationType : "N/A",
      );

      // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 1: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ‡πÉ‡∏´‡πâ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô
      if (activeService?.appointmentAt && activeService?.branchId && activeService?.serviceType) {
        console.log(
          "‚úÖ [MUTATION] Queue booking requirements met! Proceeding with queue booking...",
        );

        // ‡∏î‡∏∂‡∏á locationType ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
        const locationType =
          "locationType" in activeService ? (activeService as any).locationType : undefined;

        // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏π‡∏Å‡∏Ñ‡πâ‡∏≤
        const customerName = (activeService as any).customerName || "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡∏ä‡∏∑‡πà‡∏≠";
        const customerPhone = (activeService as any).phone || "";
        // ‡πÉ‡∏ä‡πâ LINE User ID ‡∏à‡∏≤‡∏Å assessment (‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô parameter) ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡πÉ‡∏ä‡πâ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
        const customerLineUserId = lineUserId || customerPhone;

        // ‡∏™‡∏£‡πâ‡∏≤‡∏á payload ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß (‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà)
        const queuePayload: QueueBookingPayload = {
          customer: {
            fullname: customerName,
            phone: customerPhone,
            line_user_id: customerLineUserId,
            email: "",
            picture_url: "https://lh3.googleusercontent.com/d/1TuqxKpYBdgpK-rtul5auS0b0B84JyBoG",
          },
          appointment: {
            date: activeService.appointmentAt,
            type: getAppointmentType(locationType),
            serviceType: getServiceTypeInThai(assessmentPayload),
            branchId: activeService.branchId,
            requiredTags: getRequiredTags(assessmentPayload),
          },
        };

        console.log("üì¶ [MUTATION] Queue Payload:", JSON.stringify(queuePayload, null, 2));

        // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏Å‡∏≤‡∏£‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏Å‡πà‡∏≠‡∏ô (‡∏ñ‡πâ‡∏≤‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏à‡∏∞ throw error ‡πÑ‡∏°‡πà‡πÑ‡∏õ‡∏™‡∏£‡πâ‡∏≤‡∏á assessment)
        await bookQueue(queuePayload);
        console.log("‚úÖ [MUTATION] Queue booking successful! Proceeding to create assessment...");
      } else {
        console.log("‚ö†Ô∏è  [MUTATION] Queue booking requirements NOT met. Skipping queue booking.");
        console.log(
          "   Missing:",
          !activeService?.appointmentAt ? "appointmentAt " : "",
          !activeService?.branchId ? "branchId " : "",
          !activeService?.serviceType ? "serviceType " : "",
        );
      }

      // ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏ó‡∏µ‡πà 2: ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï assessment (‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏à‡∏≠‡∏á‡∏Ñ‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß)
      console.log("üì§ [MUTATION] Creating/updating assessment...");
      const assessmentRes = await axios.put(url, assessmentPayload, {
        headers: { "Content-Type": "application/json" },
      });

      console.log("‚úÖ [MUTATION] Assessment PUT response:", assessmentRes.data);
      return assessmentRes.data;
    },
    onSuccess: (data) => {
      console.log("üéâ [MUTATION] Mutation successful!");
      console.log("üéâ [MUTATION] Success data:", data);
      if (data.success) {
        console.log("üîÑ [MUTATION] Invalidating assessment query cache...");
        queryClient.invalidateQueries({ queryKey: ["assessment", assessmentId] });
      }
    },
    onError: (error) => {
      console.error("üí• [MUTATION] Mutation failed!");
      console.error("üí• [MUTATION] Error:", error);
      if (axios.isAxiosError(error)) {
        console.error("üí• [MUTATION] Axios Error Response:", error.response?.data);
        console.error("üí• [MUTATION] Axios Error Status:", error.response?.status);
      }
    },
  });
}
